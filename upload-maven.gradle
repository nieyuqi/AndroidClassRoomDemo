import org.gradle.api.publish.maven.internal.publication.DefaultMavenPom

def getLocalProperties() {
    Properties localProperties = new Properties()
    File file = project.rootProject.file('local.properties')
    if (file.exists()) {
        localProperties.load(file.newReader("UTF-8"))
    }
    return localProperties
}

// get Local Properties
Properties localProperties = getLocalProperties()
def SNAPSHOT = localProperties.get("SNAPSHOT")
def publishToTestSnapshot = localProperties.get("publishToTestSnapshot")
def mavenReleasePath = localProperties.get("mavenReleasePath")
def mavenSnapshotPath = localProperties.get("mavenSnapshotPath")
def mavenTestSnapshotPath = localProperties.get("mavenTestSnapshotPath")
def mavenDescription = localProperties.get("mavenDescription")
def mavenUrl = localProperties.get("mavenUrl")
def mavenUserName = localProperties.get("mavenUserName")
def mavenPassword = localProperties.get("mavenPassword")
def mavenGroup = localProperties.get("mavenGroup")


def hasAndroidPlugin() {
    return getPlugins().inject(false) { a, b ->
        def classStr = b.getClass().name
        def isAndroid = ("com.android.build.gradle.LibraryPlugin" == classStr) || ("com.android.build.gradle.AppPlugin" == classStr)
        a || isAndroid
    }
}

task sourcesJar(type: Jar) {
    if (hasAndroidPlugin()) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    } else {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}

/**
 * generate android javadoc
 */
task androidJavadocs(type: Javadoc) {
    if (hasAndroidPlugin()) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError = false //ignore error
    }
}

/**
 * javadoc config
 */
androidJavadocs {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title project.name
    }
}

/**
 * generate xxx-javadoc.jar
 */
task javadocsJar(type: Jar, dependsOn: androidJavadocs) {
    if (hasAndroidPlugin()) {
        from androidJavadocs.destinationDir
        classifier = 'javadoc'
    } else {
        from javadoc
        classifier 'javadoc'
    }
}

def libraryVersion = configVersionName
if (mavenDescription == null || mavenDescription.trim() == '') mavenDescription = project.description
def mavenPath = mavenReleasePath
if (SNAPSHOT == 'true') {
    libraryVersion = libraryVersion + "-SNAPSHOT"
    mavenPath = mavenSnapshotPath
    if (publishToTestSnapshot == 'true') mavenPath = mavenTestSnapshotPath
}

/***************************************************************************************************
 * publish to artifactory maven
 *
 * run with CMD:
 *  `./gradlew clean --stacktrace`
 *  `./gradlew :<module>:assembleRelease --stacktrace`
 *  `./gradlew :<module>:generatePomFileForAarPublication --stacktrace`
 *  `./gradlew :<module>:artifactoryPublish --stacktrace`
 **************************************************************************************************/
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
publishing {
    publications {
        aar(MavenPublication) {
            groupId mavenGroup
            version = libraryVersion
            artifactId project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            // publish sources
            artifact sourcesJar

            // publish javadocs
            //artifact javadocsJar

            configPomDescription(pom, mavenDescription)
            configPomDependencies(pom)
        }
    }
}


artifactory {
    contextUrl = mavenUrl
    publish {
        repository {
            // The Artifactory repository key(path) to publish to
            repoKey = mavenPath
            username = mavenUserName
            password = mavenPassword
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Optional map of properties to attach to all published artifacts
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
afterEvaluate {
    configDependency()
}

/**
 * config task dependency
 */
def configDependency() {
    // after this, you can execute './gradlew artifactoryPublish'
    // instead of './gradlew assembleRelease artifactoryPublish'
    artifactoryPublish.dependsOn assembleRelease, sourcesJar //, javadocsJar

    /// not work sometimes
    //artifactoryPublish.dependsOn generatePomFileForAarPublication
}

/**
 *  The Artifactory publication doesn't know about our dependencies,
 *  so we have to manually add them to the pom.
 */
def configPomDependencies(DefaultMavenPom pom) {
    pom.withXml {
        // for dependencies and exclusions
        def dependenciesNode = asNode().appendNode('dependencies')
        [configurations.compile, configurations.implementation, configurations.api].each { configType ->
            configType.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dp.group)
                dependencyNode.appendNode('artifactId', dp.name)
                dependencyNode.appendNode('version', dp.version)

                // for exclusions
                if (dp.excludeRules.size() > 0) {
                    def exclusions = dependencyNode.appendNode('exclusions')
                    dp.excludeRules.each { ExcludeRule ex ->
                        def exclusion = exclusions.appendNode('exclusion')
                        exclusion.appendNode('groupId', ex.group)
                        exclusion.appendNode('artifactId', ex.module)
                    }
                }
            }
        } // configurations[] end
    }
}

/**
 *  The Artifactory publication doesn't know about our description,
 *  so we have to manually add them to the pom.
 */
def configPomDescription(DefaultMavenPom pom, String desc) {
    pom.withXml {
        def descriptionNode = asNode().appendNode('description')
        descriptionNode.value = desc
    }
}

/***************************************************************************************************
 * publish to Nexus3
 *
 * run with CMD:
 *  `./gradlew clean --stacktrace`
 *  `./gradlew :<module>:uploadArchives --stacktrace`
 **************************************************************************************************/
/*
apply plugin: 'maven'
artifacts {
    archives sourcesJar
    //archives javadocsJar
}
uploadArchives {
    configuration = configurations.archives
    println "archives to upload: " + configuration.allArtifacts.files.asPath
    repositories {
        mavenDeployer {
            repository(url: "${mavenUrl}/repository/${mavenPath}/") {
                authentication(userName: mavenUserName, password: mavenPassword)
            }
            snapshotRepository(url: "${mavenUrl}/repository/${mavenPath}") {
                authentication(userName: mavenUserName, password: mavenPassword)
            }
            pom.project {
                version libraryVersion
                artifactId project.name
                groupId mavenGroup
                //packaging 'aar'
                description mavenDescription
            }
        }
    }
}
*/
